var documenterSearchIndex = {"docs":
[{"location":"#MPSKit.jl-documentation-1","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"This code track contains the numerical research and development of the Ghent Quantum Group with regard to tensor network simulation in the julia language. The purpose of this package is to facilitate efficient collaboration between different members of the group.","category":"page"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Topics of research on tensor networks within the realm of this track include:","category":"page"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Tensor network algorithms (excitations, tdvp, vumps, ...)\nMPS routines (MPS diagonalization, Schmidt Decomposition, MPS left and right multiplication, ...)\nThe study of several useful models (nearest neighbour interactions, MPO's, long range interactions, ...)","category":"page"},{"location":"#Contents-1","page":"MPSKit.jl documentation","title":"Contents","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"","category":"page"},{"location":"#Statement-of-Intent-1","page":"MPSKit.jl documentation","title":"Statement of Intent","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Quantum mechanics is one of the biggest breakthroughs in the history of physics as, for instance, the successful applications of the theory to the hydrogen atom showed. Currently, almost a century later, physicists are still struggling to fully understand the implications of quantum mechanics. Especially in systems with many degrees of freedom where the complexity escalates quickly. In recent years, it was realized that quantum entanglement can be exploited to create an efficient ansatz for the ground and  low energy states of a many-body system. These ansatz are known as ‘tensor network states’.","category":"page"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Tensor network states allow for a more efficient use of time and computational resources since one no longer has to look for the correct answer in the entire space of possible states, restricting to the physical subspace of tensor network states is sufficient. The local structure of these states also provide ways to get a deeper understanding of generic emergent phenomena in quantum many-body systems and their connection to entanglement.","category":"page"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Hence, tensor network techniques are finding their way in an increasing number of fields in physics, ranging from condensed matter theory to quantum gravity. In the UGent quantum group of Prof. Verstraete and Prof. Haegeman we are at the forefront of many of these applications, with an expertise in both the theoretical and numerical aspects. With this code base we aim to create a flexible, well-optimized and inclusive tool to support and stimulate rapid expansion of this expertise.","category":"page"},{"location":"#Getting-Started-1","page":"MPSKit.jl documentation","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"For those who want to dive in immediately, the examples folder is a good starting point. Those who want read up first can use this documentation file.","category":"page"},{"location":"#Functions-1","page":"MPSKit.jl documentation","title":"Functions","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"Modules = [MPSKit]\nPrivate = false\nOrder   = [:module, :type, :function]","category":"page"},{"location":"#MPSKit.Dmrg","page":"MPSKit.jl documentation","title":"MPSKit.Dmrg","text":"onesite dmrg\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Dmrg2","page":"MPSKit.jl documentation","title":"MPSKit.Dmrg2","text":"twosite dmrg\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.FiniteMpo","page":"MPSKit.jl documentation","title":"MPSKit.FiniteMpo","text":"FiniteMps(data::Array)\n\nfinite one dimensional mps\nalgorithms usually assume a right-orthormalized input\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.FiniteMps","page":"MPSKit.jl documentation","title":"MPSKit.FiniteMps","text":"FiniteMps(data::Array)\n\nfinite one dimensional mps\nalgorithms usually assume a right-orthormalized input\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Idmrg1","page":"MPSKit.jl documentation","title":"MPSKit.Idmrg1","text":"onesite infinite dmrg\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Idmrg2","page":"MPSKit.jl documentation","title":"MPSKit.Idmrg2","text":"twosite infinite dmrg\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.MpoHamiltonian","page":"MPSKit.jl documentation","title":"MPSKit.MpoHamiltonian","text":"MpoHamiltonian\n\nrepresents a general periodic quantum hamiltonian\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.MpsCenterGauged","page":"MPSKit.jl documentation","title":"MPSKit.MpsCenterGauged","text":"st = MpsCenterGauged(a::Array)\n\nType definition of a uniform center gauged mps.\nst.AL[i]*st.CR[i] == st.CR[i-1]*st.AR[i] == st.AC[i]\nst.AL[i] is left unitary\nst.AR[i] is right unitary\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.MpsComoving","page":"MPSKit.jl documentation","title":"MPSKit.MpsComoving","text":"MpsComoving(leftstate,window,rightstate)\n\nmuteable window of tensors on top of an infinite chain\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.MpsMultiline","page":"MPSKit.jl documentation","title":"MPSKit.MpsMultiline","text":"2d extension of MpsCenterGauged\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.OptimalExpand","page":"MPSKit.jl documentation","title":"MPSKit.OptimalExpand","text":"expands the given mps using the algorithm given in the vumps paper\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.RandExpand","page":"MPSKit.jl documentation","title":"MPSKit.RandExpand","text":"use a random matrix to expand ...\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.SimpleManager","page":"MPSKit.jl documentation","title":"MPSKit.SimpleManager","text":"a very simple bond dimension manager when manager.criterium(state) is satisfied it does nothing if not, it will use algorithm manager.change to change the bonds\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.SvdCut","page":"MPSKit.jl documentation","title":"MPSKit.SvdCut","text":"Truncate a given state using svd\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Tdvp","page":"MPSKit.jl documentation","title":"MPSKit.Tdvp","text":"onesite tdvp\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Tdvp2","page":"MPSKit.jl documentation","title":"MPSKit.Tdvp2","text":"twosite tdvp (works for finite mps's)\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.UnionTrunc","page":"MPSKit.jl documentation","title":"MPSKit.UnionTrunc","text":"Take the union of 2 truncation algorithms using &\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.Vumps","page":"MPSKit.jl documentation","title":"MPSKit.Vumps","text":"see https://arxiv.org/abs/1701.07035\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.VumpsSvdCut","page":"MPSKit.jl documentation","title":"MPSKit.VumpsSvdCut","text":"use an idmrg2 step to truncate/expand the bond dimension\n\n\n\n\n\n","category":"type"},{"location":"#MPSKit.dynamicaldmrg-Tuple{Union{FiniteMps, MpsComoving},Any,MpoHamiltonian}","page":"MPSKit.jl documentation","title":"MPSKit.dynamicaldmrg","text":"https://arxiv.org/pdf/cond-mat/0203500.pdf\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.entropy-Tuple{MpsCenterGauged}","page":"MPSKit.jl documentation","title":"MPSKit.entropy","text":"calculates the entropy of a given state\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.exp_decomp-Tuple{Any}","page":"MPSKit.jl documentation","title":"MPSKit.exp_decomp","text":"Decomposes fun into a sum of exponentials (coeff,exponents)=exp_decomp(fun;fitdist,numexp);\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.find_groundstate","page":"MPSKit.jl documentation","title":"MPSKit.find_groundstate","text":"find_groundstate(state,ham,alg,pars=params(state,ham))\n\nfind the groundstate for ham using algorithm alg\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.l_LL-Union{Tuple{MpsCenterGauged{A,B} where B<:(TensorKit.AbstractTensorMap{S,1,1} where S)}, Tuple{A}, Tuple{MpsCenterGauged{A,B} where B<:(TensorKit.AbstractTensorMap{S,1,1} where S),Int64}} where A","page":"MPSKit.jl documentation","title":"MPSKit.l_LL","text":"l_LL(state,location)\nLeft dominant eigenvector of the AL-AL transfermatrix\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.l_LR","page":"MPSKit.jl documentation","title":"MPSKit.l_LR","text":"l_LR(state,location)\nLeft dominant eigenvector of the AL-AR transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.l_RL","page":"MPSKit.jl documentation","title":"MPSKit.l_RL","text":"l_RL(state,location)\nLeft dominant eigenvector of the AR-AL transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.l_RR","page":"MPSKit.jl documentation","title":"MPSKit.l_RR","text":"l_RR(state,location)\nLeft dominant eigenvector of the AR-AR transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.leading_boundary","page":"MPSKit.jl documentation","title":"MPSKit.leading_boundary","text":"leading_boundary(state,ham,alg,pars=params(state,ham))\n\napproximate the leading eigenvector for ham\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.r_LL","page":"MPSKit.jl documentation","title":"MPSKit.r_LL","text":"r_LL(state,location)\nRight dominant eigenvector of the AL-AL transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.r_LR","page":"MPSKit.jl documentation","title":"MPSKit.r_LR","text":"r_LR(state,location)\nRight dominant eigenvector of the AL-AR transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.r_RL","page":"MPSKit.jl documentation","title":"MPSKit.r_RL","text":"r_RL(state,location)\nRight dominant eigenvector of the AR-AL transfermatrix\n\n\n\n\n\n","category":"function"},{"location":"#MPSKit.r_RR-Union{Tuple{MpsCenterGauged{A,B} where B<:(TensorKit.AbstractTensorMap{S,1,1} where S)}, Tuple{A}, Tuple{MpsCenterGauged{A,B} where B<:(TensorKit.AbstractTensorMap{S,1,1} where S),Int64}} where A","page":"MPSKit.jl documentation","title":"MPSKit.r_RR","text":"r_RR(state,location)\nRight dominant eigenvector of the AR-AR transfermatrix\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.spinmatrices-Tuple{Union{Rational{Int64}, Int64}}","page":"MPSKit.jl documentation","title":"MPSKit.spinmatrices","text":"Returns spin operators Sx,Sy,Sz,Id for spin s\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.splitham-Tuple{MpoHamiltonian}","page":"MPSKit.jl documentation","title":"MPSKit.splitham","text":"given a thermal state, you can map it to an mps by fusing the physical legs together to prepare a gibbs ensemble, you need to evolve this state with H working on both legs here we return the 'superhamiltonian' (Hid,idH)\n\n\n\n\n\n","category":"method"},{"location":"#MPSKit.timestep","page":"MPSKit.jl documentation","title":"MPSKit.timestep","text":"(newstate,newpars) = timestep(state,hamiltonian,dt,alg,pars = params(state,hamiltonian))\n\nevolves state forward by dt using algorithm alg\n\n\n\n\n\n","category":"function"},{"location":"#Index-1","page":"MPSKit.jl documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"This is the index.","category":"page"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"","category":"page"},{"location":"#Supporting-and-Credit-1","page":"MPSKit.jl documentation","title":"Supporting and Credit","text":"","category":"section"},{"location":"#","page":"MPSKit.jl documentation","title":"MPSKit.jl documentation","text":"If you have any questions, bug reports, feature requests, etc., please submit an issue on github. If you would like to contribute to the moral of the coding team, please send us food. The software in this stack was developed as part of academic research of the UGent Quantum Group of Prof. Verstraete and Prof. Haegeman.","category":"page"}]
}
